//-- used on 08-VisualC++Crackme
//-- [1] to search input str on the stack as parameter to function call 
//-- [2] to search input str in the EAX register
//-- [3] Patching with XOR EAX,EAX and NOP to reverse jump logic
//-- [4] Scanning memory for Input Str
//-- by crackinglessons.com ---

ClearLog

//---- [1] search the top of the stack for input string ----
$count_system = 0
$count_sti = 0

loop:
$res = 0
sti
inc $count_sti
log "$count_sti: {$count_sti}"
$module_type = mod.party(eip)  
log "current addr: {eip}, type: {$module_type}"
cmp $module_type, 1
je run_to_user

$esp_value =  [esp]
log "searching str at {$esp_value}"
$res = strstr(utf8($esp_value), "123456789") //--replace with the str you entered
log "search result: {$res}"
cmp $res, 1
je str_found
jmp loop
ret

run_to_user:
inc $count_system
log "$count_system: {$count_system}"
rtu 
jmp loop
ret

str_found:
log "FOUND"
pause
ret


//--THIS WORKS, it cmp eax with esi
//---- [2] search the register for input string ---
$count_system = 0
$count_sti = 0

loop2:
sti
inc $count_sti
log "$count_sti: {$count_sti}"
$module_type = mod.party(eip)  
log "current addr: {eip}, type: {$module_type}"
cmp $module_type, 1
je run_to_user2

$res = 0
$eax_value = eax //--extract the eax value
log "Searching for str at {$eax_value}"
$res = strstr(utf8($eax_value),"123456789") //--replace with the str you entered
cmp $res, 1
je str_found2
jmp loop2
ret

run_to_user2:
inc $count_system
log "$count_system: {$count_system}"
rtu 
jmp loop2
ret

str_found2:
log "FOUND"
pause
ret


//--- [3] Patching with XOR EAX, EAX and NOPs to reverse jump logic ---
//---Get base address of main module for aob scan
$baseaddr = mod.main()
log "baseaddr: {$baseaddr}"

//---Do the patch
findallmem $baseaddr, "1B C0 83 D8 FF 85 C0 75 22 6A 40 68 80 50 40 00 68 40 50 40 00"
log "result: {$result}"
cmp $result, 1
jl errorexit
$addr = ref.addr(0)
log "{$addr}"

//---Patch $addr with XOR EAX,EAX and NOPs
mov $addr, #31 C0 90 90 90#
ret

errorexit:
log "error, aob not found"


//--- [4] Scan memory for input str ---
//---Get base address of main module for aob scan
$baseaddr = mod.main()
log "baseaddr: {$baseaddr}"

//---Patch the jump
findallmem $baseaddr, "31 32 33 34 35 36 37 38 39" //'123456789'
log "result: {$result}"
cmp $result, 1
jl errorexit2
$addr = ref.addr(0)
log "{$addr}"
bpc
ret

errorexit2:
log "error, aob not found"