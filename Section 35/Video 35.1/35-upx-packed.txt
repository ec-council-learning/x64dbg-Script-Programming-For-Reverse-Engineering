//--35-upx-packed.txt
//-- used on 16-lowercase crackme
//---- [1] hit VirtualProtect 4x to let it fully unpack
//---- [2] Put BP on addr after user input
//---- [3] search param window for utf8 input string - to find Critical Region ----
//---- [4] Patch with NOPs to always show good message

//-- by crackinglessons.com ---

ClearLog
bpc

//---- [1] hit VirtualProtect 4x to let it fully unpack
bp VirtualProtect
$counter = 0
loop2:
inc $counter
cmp $counter,4
ja exitloop
run
jmp loop2

exitloop:
log "out of loop"


//---[2] Put BP on addr after user input

$baseaddr = mod.main()
log "baseaddr: {$baseaddr}"

findallmem $baseaddr, "0F 57 C0 0F 11 45 F0 48 C7 45 08 0F 00 00 00 66 C7 45 F0 50 69" 
log "result: {$result}"
cmp $result, 1
jl notfound_exit
$addr = ref.addr(0)
log "{$addr}"
bp $addr
run

//---- [3] search param window for utf8 input string - to find Critical Region ----
$count_system = 0
$count_sti = 0

loop:
$res = 0
sti
inc $count_sti
log "$count_sti: {$count_sti}"
$module_type = mod.party(rip)  
log "current addr: {rip}, type: {$module_type}"
cmp $module_type, 1
je run_to_user

$rcx_value =  rcx
log "searching str at {$rcx_value}"
$res = strstr(utf8($rcx_value), "31337") //--replace with the str you entered
log "search result: {$res}"
cmp $res, 1
je str_found
jmp loop
ret

run_to_user:
inc $count_system
log "$count_system: {$count_system}"
rtu 
jmp loop
ret

str_found:
log "FOUND"
pause
ret


//--- [4] Patch with NOPs to always show good message
$baseaddr = mod.main()
log "baseaddr: {$baseaddr}"

findallmem $baseaddr, "0F 85 82 00 00 00 E8 C0 17 00 00 85 C0 75 79 48 8D 15 C2 29 00 00" 
log "result: {$result}"
cmp $result, 1
jl notfound_exit
$addr = ref.addr(0)
log "{$addr}"
mov $addr, #90 90 90 90 90 90 90 90 90 90 90 90 90 90 90#
ret

notfound_exit:
log "aob not found"
ret











